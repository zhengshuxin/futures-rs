var searchIndex = {};
searchIndex["futures_uds"] = {"doc":"Bindings for Unix Domain Sockets and futures","items":[[3,"UnixListener","futures_uds","A Unix socket which can accept connections from other unix sockets.",null,null],[3,"UnixStream","","A structure representing a connected unix socket.",null,null],[3,"UnixDatagram","","An I/O object representing a Unix datagram socket.",null,null],[11,"bind","","Creates a new `UnixListener` bound to the specified path.",0,{"inputs":[{"name":"p"},{"name":"loophandle"}],"output":{"name":"iofuture"}}],[11,"local_addr","","Returns the local socket address of this listener.",0,null],[11,"take_error","","Returns the value of the `SO_ERROR` option.",0,null],[11,"incoming","","Consumes this listener, returning a stream of the sockets this listener\naccepts.",0,null],[11,"fmt","","",0,null],[11,"poll","","",0,null],[11,"schedule","","",0,null],[11,"as_raw_fd","","",0,null],[11,"connect","","Connects to the socket named by `path`.",1,{"inputs":[{"name":"p"},{"name":"loophandle"}],"output":{"name":"iofuture"}}],[11,"pair","","Creates an unnamed pair of connected sockets.",1,{"inputs":[{"name":"loophandle"}],"output":{"name":"iofuture"}}],[11,"local_addr","","Returns the socket address of the local half of this connection.",1,null],[11,"peer_addr","","Returns the socket address of the remote half of this connection.",1,null],[11,"take_error","","Returns the value of the `SO_ERROR` option.",1,null],[11,"shutdown","","Shuts down the read, write, or both halves of this connection.",1,null],[11,"read","","",1,null],[11,"write","","",1,null],[11,"flush","","",1,null],[11,"fmt","","",1,null],[11,"poll","","",1,null],[11,"schedule","","",1,null],[11,"as_raw_fd","","",1,null],[11,"bind","","Creates a new `UnixDatagram` bound to the specified path.",2,{"inputs":[{"name":"p"},{"name":"loophandle"}],"output":{"name":"iofuture"}}],[11,"pair","","Creates an unnamed pair of connected sockets.",2,{"inputs":[{"name":"loophandle"}],"output":{"name":"iofuture"}}],[11,"connect","","Connects the socket to the specified address.",2,null],[11,"local_addr","","Returns the local address that this socket is bound to.",2,null],[11,"peer_addr","","Returns the address of this socket&#39;s peer.",2,null],[11,"recv_from","","Receives data from the socket.",2,null],[11,"recv","","Receives data from the socket.",2,null],[11,"send_to","","Sends data on the socket to the specified address.",2,null],[11,"send","","Sends data on the socket to the socket&#39;s peer.",2,null],[11,"take_error","","Returns the value of the `SO_ERROR` option.",2,null],[11,"shutdown","","Shut down the read, write, or both halves of this connection.",2,null],[11,"fmt","","",2,null],[11,"poll","","",2,null],[11,"schedule","","",2,null],[11,"as_raw_fd","","",2,null]],"paths":[[3,"UnixListener"],[3,"UnixStream"],[3,"UnixDatagram"]]};
searchIndex["futures_curl"] = {"doc":"A `Future` interface on top of libcurl","items":[[3,"Session","futures_curl","A shared cache for HTTP requests to pool data such as TCP connections\nbetween.",null,null],[3,"Perform","","A future returned from the `Session::perform` method.",null,null],[11,"clone","","",0,null],[11,"new","","Creates a new HTTP session object which will be bound to the given event\nloop.",0,{"inputs":[{"name":"looppin"}],"output":{"name":"session"}}],[11,"perform","","Execute and HTTP request asynchronously, returning a future representing\nthe request&#39;s completion.",0,null],[11,"poll","","",1,null],[11,"schedule","","",1,null]],"paths":[[3,"Session"],[3,"Perform"]]};
searchIndex["futures_tls"] = {"doc":"Async TLS streams","items":[[3,"ServerContext","futures_tls","A context used to initiate server-side connections of a TLS server.",null,null],[3,"ClientContext","","A context used to initiate client-side connections to a TLS server.",null,null],[3,"TlsStream","","A wrapper around an underlying raw stream which implements the TLS or SSL\nprotocol.",null,null],[3,"ClientHandshake","","A future returned from `ClientContext::handshake` used to represent an\nin-progress TLS handshake.",null,null],[3,"ServerHandshake","","A future returned from `ServerContext::handshake` used to represent an\nin-progress TLS handshake.",null,null],[11,"new","","",0,{"inputs":[{"name":"x509"},{"name":"pkey"}],"output":{"name":"result"}}],[11,"ssl_context_mut","","",0,null],[11,"ssl_context_mut","","",1,null],[0,"backend","","Backend-specific extension traits.",null,null],[0,"openssl","futures_tls::backend","Extension traits specific to the OpenSSL backend.",null,null],[8,"ServerContextExt","futures_tls::backend::openssl","Extension trait for servers backed by OpenSSL.",null,null],[10,"new","","Creates a new server context given the public/private key pair.",2,{"inputs":[{"name":"x509"},{"name":"pkey"}],"output":{"name":"result"}}],[10,"ssl_context_mut","","Gets a mutable reference to the underlying SSL context, allowing further\nconfiguration.",2,null],[8,"ClientContextExt","","Extension trait for clients backed by OpenSSL.",null,null],[10,"ssl_context_mut","","Gets a mutable reference to the underlying SSL context, allowing further\nconfiguration.",3,null],[11,"new","futures_tls","Creates a new client context ready for connecting to a remote server.",1,{"inputs":[],"output":{"name":"result"}}],[11,"handshake","","Performs a handshake with the given I/O stream to resolve to an actual\nI/O stream.",1,null],[11,"handshake","","Performs a handshake with the given I/O stream to resolve to an actual\nI/O stream.",0,null],[11,"poll","","",4,null],[11,"schedule","","",4,null],[11,"poll","","",5,null],[11,"schedule","","",5,null],[11,"poll","","",6,null],[11,"schedule","","",6,null],[11,"read","","",6,null],[11,"write","","",6,null],[11,"flush","","",6,null]],"paths":[[3,"ServerContext"],[3,"ClientContext"],[8,"ServerContextExt"],[8,"ClientContextExt"],[3,"ClientHandshake"],[3,"ServerHandshake"],[3,"TlsStream"]]};
searchIndex["futures_mio"] = {"doc":"Mio bindings with streams and futures","items":[[3,"Loop","futures_mio","An event loop.",null,null],[3,"LoopPin","","A non-sendable handle to an event loop, useful for manufacturing instances\nof `LoopData`.",null,null],[3,"LoopHandle","","Handle to an event loop, used to construct I/O objects, send messages, and\notherwise interact indirectly with the event loop itself.",null,null],[3,"AddSource","","A future which will resolve a unique `tok` token for an I/O object.",null,null],[3,"AddTimeout","","Return value from the `LoopHandle::add_timeout` method, a future that will\nresolve to a `TimeoutToken` to configure the behavior of that timeout.",null,null],[3,"LoopData","","A handle to data that is owned by an event loop thread, and is only\naccessible on that thread itself.",null,null],[3,"AddLoopData","","Future returned from the `LoopHandle::add_loop_data` method.",null,null],[3,"TimeoutToken","","A token that identifies an active timeout.",null,null],[3,"Source","","Type of I/O objects inserted into the event loop, created by `Source::new`.",null,null],[3,"ReadinessStream","","A concrete implementation of a stream of readiness notifications for I/O\nobjects that originates from an event loop.",null,null],[3,"TcpListener","","An I/O object representing a TCP socket listening for incoming connections.",null,null],[3,"TcpStream","","An I/O object representing a TCP stream connected to a remote endpoint.",null,null],[3,"Timeout","","A future representing the notification that a timeout has occurred.",null,null],[3,"UdpSocket","","An I/O object representing a UDP socket.",null,null],[11,"new","","Creates a new readiness stream associated with the provided\n`loop_handle` and for the given `source`.",0,{"inputs":[{"name":"loophandle"},{"name":"iosource"}],"output":{"name":"readinessstreamnew"}}],[11,"poll","","",0,null],[11,"schedule","","",0,null],[11,"drop","","",0,null],[11,"clone","","",1,null],[11,"clone","","",2,null],[11,"new","","Creates a new event loop, returning any error that happened during the\ncreation.",3,{"inputs":[],"output":{"name":"result"}}],[11,"handle","","Generates a handle to this event loop used to construct I/O objects and\nsend messages.",3,null],[11,"pin","","Returns a &quot;pin&quot; of this event loop which cannot be sent across threads\nbut can be used as a proxy to the event loop itself.",3,null],[11,"add_loop_data","","Creates a new `LoopData&lt;A&gt;` handle by associating data to be directly\nstored by this event loop.",3,null],[11,"run","","Runs a future until completion, driving the event loop while we&#39;re\notherwise waiting for the future to complete.",3,null],[11,"add_source","","Add a new source to an event loop, returning a future which will resolve\nto the token that can be used to identify this source.",1,null],[11,"schedule","","Begin listening for events on an event loop.",1,null],[11,"deschedule","","Stop listening for events on an event loop.",1,null],[11,"drop_source","","Unregister all information associated with a token on an event loop,\ndeallocating all internal resources assigned to the given token.",1,null],[11,"add_timeout","","Adds a new timeout to get fired at the specified instant, notifying the\nspecified task.",1,null],[11,"update_timeout","","Updates a previously added timeout to notify a new task instead.",1,null],[11,"cancel_timeout","","Cancel a previously added timeout.",1,null],[11,"add_loop_data","","Schedules a closure to add some data to event loop thread itself.",1,null],[11,"shutdown","","Send a message to the associated event loop that it should shut down, or\notherwise break out of its current loop of iteration.",1,null],[11,"add_loop_data","","Adds some data to the event loop this pin is associated with.",2,null],[11,"handle","","Returns a reference to the underlying handle to the event loop.",2,null],[11,"poll","","",4,null],[11,"schedule","","",4,null],[11,"poll","","",5,null],[11,"schedule","","",5,null],[11,"poll","","",6,null],[11,"schedule","","",6,null],[11,"get","","Gets a shared reference to the underlying data in this handle.",7,null],[11,"get_mut","","Gets a mutable reference to the underlying data in this handle.",7,null],[11,"executor","","Acquire the executor associated with the thread that owns this\n`LoopData&lt;A&gt;`&#39;s data.",7,null],[11,"loop_handle","","Returns a reference to the handle that this data is bound to.",7,null],[11,"poll","","",7,null],[11,"schedule","","",7,null],[11,"drop","","",7,null],[11,"new","","Creates a new `Source` wrapping the provided source of events.",8,{"inputs":[{"name":"e"}],"output":{"name":"source"}}],[11,"take_readiness","","Consumes the last readiness notification that this source received.",8,null],[11,"io","","Gets access to the underlying I/O object.",8,null],[11,"as_raw_fd","","",9,null],[11,"as_raw_fd","","",10,null],[11,"from_listener","","Create a new TCP listener from the standard library&#39;s TCP listener.",10,{"inputs":[{"name":"tcplistener"},{"name":"socketaddr"},{"name":"loophandle"}],"output":{"name":"iofuture"}}],[11,"local_addr","","Returns the local address that this listener is bound to.",10,null],[11,"incoming","","Consumes this listener, returning a stream of the sockets this listener\naccepts.",10,null],[11,"fmt","","",10,null],[11,"poll","","",10,null],[11,"schedule","","",10,null],[11,"tcp_listen","","Create a new TCP listener associated with this event loop.",1,null],[11,"tcp_connect","","Create a new TCP stream connected to the specified address.",1,null],[11,"connect_stream","","Creates a new `TcpStream` from the pending socket inside the given\n`std::net::TcpStream`, connecting it to the address specified.",9,{"inputs":[{"name":"tcpstream"},{"name":"socketaddr"},{"name":"loophandle"}],"output":{"name":"iofuture"}}],[11,"local_addr","","Returns the local address that this stream is bound to.",9,null],[11,"peer_addr","","Returns the remote address that this stream is connected to.",9,null],[11,"shutdown","","Shuts down the read, write, or both halves of this connection.",9,null],[11,"set_nodelay","","Sets the value of the `TCP_NODELAY` option on this socket.",9,null],[11,"set_keepalive_s","","Sets the keepalive time in seconds for this socket.",9,null],[11,"read","","",9,null],[11,"write","","",9,null],[11,"flush","","",9,null],[11,"fmt","","",9,null],[11,"poll","","",9,null],[11,"schedule","","",9,null],[11,"as_raw_fd","","",11,null],[11,"udp_bind","","Create a new UDP socket bound to the specified address.",1,null],[11,"from_socket","","Creates a new `UdpSocket` from the previously bound socket provided.",11,{"inputs":[{"name":"udpsocket"},{"name":"loophandle"}],"output":{"name":"iofuture"}}],[11,"local_addr","","Returns the local address that this stream is bound to.",11,null],[11,"send_to","","Sends data on the socket to the given address. On success, returns the\nnumber of bytes written.",11,null],[11,"recv_from","","Receives data from the socket. On success, returns the number of bytes\nread and the address from whence the data came.",11,null],[11,"broadcast","","Gets the value of the `SO_BROADCAST` option for this socket.",11,null],[11,"set_broadcast","","Sets the value of the `SO_BROADCAST` option for this socket.",11,null],[11,"multicast_loop_v4","","Gets the value of the `IP_MULTICAST_LOOP` option for this socket.",11,null],[11,"set_multicast_loop_v4","","Sets the value of the `IP_MULTICAST_LOOP` option for this socket.",11,null],[11,"multicast_ttl_v4","","Gets the value of the `IP_MULTICAST_TTL` option for this socket.",11,null],[11,"set_multicast_ttl_v4","","Sets the value of the `IP_MULTICAST_TTL` option for this socket.",11,null],[11,"multicast_loop_v6","","Gets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",11,null],[11,"set_multicast_loop_v6","","Sets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",11,null],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",11,null],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",11,null],[11,"join_multicast_v4","","Executes an operation of the `IP_ADD_MEMBERSHIP` type.",11,null],[11,"join_multicast_v6","","Executes an operation of the `IPV6_ADD_MEMBERSHIP` type.",11,null],[11,"leave_multicast_v4","","Executes an operation of the `IP_DROP_MEMBERSHIP` type.",11,null],[11,"leave_multicast_v6","","Executes an operation of the `IPV6_DROP_MEMBERSHIP` type.",11,null],[11,"fmt","","",11,null],[11,"poll","","",11,null],[11,"schedule","","",11,null],[11,"timeout","","Creates a new timeout which will fire at `dur` time into the future.",1,null],[11,"timeout_at","","Creates a new timeout which will fire at the time specified by `at`.",1,null],[11,"poll","","",12,null],[11,"schedule","","",12,null],[11,"drop","","",12,null],[6,"IoSource","","I/O objects inserted into the event loop",null,null]],"paths":[[3,"ReadinessStream"],[3,"LoopHandle"],[3,"LoopPin"],[3,"Loop"],[3,"AddSource"],[3,"AddTimeout"],[3,"AddLoopData"],[3,"LoopData"],[3,"Source"],[3,"TcpStream"],[3,"TcpListener"],[3,"UdpSocket"],[3,"Timeout"]]};
searchIndex["sink"] = {"doc":"A small server that writes as many nul bytes on all connections it receives.","items":[],"paths":[]};
searchIndex["echo"] = {"doc":"An echo server that just writes back everything that&#39;s written to it.","items":[],"paths":[]};
searchIndex["futures_cpupool"] = {"doc":"A simple crate for executing work on a thread pool, and getting back a\nfuture.","items":[[3,"CpuPool","futures_cpupool","A thread pool intended to run CPU intensive work.",null,null],[3,"CpuFuture","","The type of future returned from the `CpuPool::execute` function.",null,null],[11,"new","","Creates a new thread pool with `size` worker threads associated with it.",0,{"inputs":[{"name":"u32"}],"output":{"name":"cpupool"}}],[11,"new_num_cpus","","Creates a new thread pool with a number of workers equal to the number\nof CPUs on the host.",0,{"inputs":[],"output":{"name":"cpupool"}}],[11,"execute","","Execute some work on this thread pool, returning a future to the work\nthat&#39;s running on the thread pool.",0,null],[11,"clone","","",0,null],[11,"drop","","",0,null],[11,"poll","","",1,null],[11,"schedule","","",1,null]],"paths":[[3,"CpuPool"],[3,"CpuFuture"]]};
searchIndex["futures_iobuf"] = {"doc":"I/O buffers for use with futures","items":[[3,"IoBuf","futures_iobuf","A reference counted buffer of bytes.",null,null],[11,"new","","Creates a new IoBuf with no data and the default capacity.",0,{"inputs":[],"output":{"name":"iobuf"}}],[11,"with_capacity","","Creates a new IoBuf with `cap` capacity.",0,{"inputs":[{"name":"usize"}],"output":{"name":"iobuf"}}],[11,"len","","Returns the number of bytes contained in this `IoBuf`.",0,null],[11,"as_slice","","Returns the inner contents of this `IoBuf` as a slice.",0,null],[11,"split_off","","Splits the buffer into two at the given index.",0,null],[11,"drain_to","","Splits the buffer into two at the given index.",0,null],[11,"get_mut","","Returns a mutable reference to the underlying growable buffer of bytes.",0,null],[11,"as_ref","","",0,null]],"paths":[[3,"IoBuf"]]};
searchIndex["futures_io"] = {"doc":"I/O fused with futures and streams","items":[[3,"BufReader","futures_io","An I/O object which amortizes a number of `read` operations by reading many\nbytes at once into an internal buffer.",null,null],[3,"BufWriter","","An I/O object intended to mirror the `BufWriter` abstraction in the standard\nlibrary.",null,null],[3,"Chain","","An I/O combinator which will read all bytes from one stream and then the\nnext.",null,null],[3,"Copy","","A future which will copy all data from a reader into a writer.",null,null],[3,"Empty","","An I/O combinator which is always ready for a read and is always at EOF.",null,null],[3,"Flush","","A future used to fully flush an I/O object.",null,null],[3,"ReadExact","","A future which can be used to easily read the entire contents of a stream\ninto a vector.",null,null],[3,"ReadToEnd","","A future which can be used to easily read the entire contents of a stream\ninto a vector.",null,null],[3,"ReadyTracker","","An I/O object which can be used to track the read/write readiness of an\nunderlying object.",null,null],[3,"Repeat","","An I/O object of an infinite stream of bytes that&#39;s always ready to read.",null,null],[3,"Sink","","An I/O object always ready for writing that will simply move all bytes\nwritten to it into the void.",null,null],[3,"Take","","An I/O combinator which will read at most a fixed number of bytes from an\nunderlying stream before continually returning that it is at EOF.",null,null],[3,"TaskIo","","Abstraction that allows inserting an I/O object into task-local storage,\nreturning a handle that can be split.",null,null],[3,"TaskIoRead","","The readable half of a `TaskIo&lt;T&gt;` instance returned from `TaskIo::split`.",null,null],[3,"TaskIoWrite","","The writable half of a `TaskIo&lt;T&gt;` instance returned from `TaskIo::split`.",null,null],[3,"Window","","A owned window around an underlying buffer.",null,null],[3,"WriteAll","","A future used to write the entire contents of some data to a stream.",null,null],[4,"Ready","","Readiness notifications that a stream can deliver.",null,null],[13,"Read","","The I/O object is ready for a read.",0,null],[13,"Write","","The I/O object is ready for a write.",0,null],[13,"ReadWrite","","The I/O object is ready for both reading and writing.",0,null],[5,"chain","","Chains one I/O stream onto another.",null,{"inputs":[{"name":"a"},{"name":"b"}],"output":{"name":"chain"}}],[5,"copy","","Creates a future which represents copying all the bytes from one object to\nanother.",null,{"inputs":[{"name":"r"},{"name":"w"}],"output":{"name":"copy"}}],[5,"empty","","An I/O object which is always at EOF and ready for a read.",null,{"inputs":[],"output":{"name":"empty"}}],[5,"flush","","Creates a future which will entirely flush an I/O object and then yield the\nobject itself.",null,{"inputs":[{"name":"a"}],"output":{"name":"flush"}}],[5,"read_exact","","Creates a future which will read exactly enough bytes to fill `buf`,\nreturning an error if EOF is hit sooner.",null,{"inputs":[{"name":"a"},{"name":"t"}],"output":{"name":"readexact"}}],[5,"read_to_end","","Creates a future which will read all the bytes associated with the I/O\nobject `A` into the buffer provided.",null,{"inputs":[{"name":"a"},{"name":"vec"}],"output":{"name":"readtoend"}}],[5,"repeat","","Creates an I/O combinator which is always ready for reading, and infinitely\nyields a stream of bytes corresopnding to the value provided here.",null,{"inputs":[{"name":"u8"}],"output":{"name":"repeat"}}],[5,"sink","","An I/O combinator that is always ready to be written to and just gobbles up\nanything written to it.",null,{"inputs":[],"output":{"name":"sink"}}],[5,"take","","Creates a new I/O object which will read at most `amt` bytes from the\nunderlying stream, and then continuously return that it is at EOF.",null,{"inputs":[{"name":"a"},{"name":"u64"}],"output":{"name":"take"}}],[5,"write_all","","Creates a future that will write the entire contents of the buffer `buf` to\nthe stream `a` provided.",null,{"inputs":[{"name":"a"},{"name":"t"}],"output":{"name":"writeall"}}],[11,"new","","Creates a new buffered reader wrapping the specified stream with the\ndefault capacity.",1,{"inputs":[{"name":"r"}],"output":{"name":"bufreader"}}],[11,"with_capacity","","Creates a new buffered reader with the specified capacity.",1,{"inputs":[{"name":"usize"},{"name":"r"}],"output":{"name":"bufreader"}}],[11,"get_ref","","Gets a shared reference to the internal object in this buffered reader.",1,null],[11,"get_mut","","Gets a mutable reference to the internal object in this buffered\nreader.",1,null],[11,"into_inner","","Consumes this object, returning the underlying I/O object.",1,null],[11,"poll","","",1,null],[11,"schedule","","",1,null],[11,"read","","",1,null],[11,"read_to_end","","",1,null],[11,"fill_buf","","",1,null],[11,"consume","","",1,null],[11,"new","","Creates a new buffered writer with the default internal capacity.",2,{"inputs":[{"name":"w"}],"output":{"name":"bufwriter"}}],[11,"with_capacity","","Creates a new buffered writer with the specified capacity.",2,{"inputs":[{"name":"usize"},{"name":"w"}],"output":{"name":"bufwriter"}}],[11,"get_ref","","Gets a shared reference to the internal object in this buffered writer.",2,null],[11,"get_mut","","Gets a mutable reference to the internal object in this buffered\nwriter.",2,null],[11,"into_inner","","Consumes this buffered writer, returning the underlying I/O object.",2,null],[11,"poll","","",2,null],[11,"schedule","","",2,null],[11,"write","","",2,null],[11,"flush","","",2,null],[11,"poll","","",3,null],[11,"schedule","","",3,null],[11,"read","","",3,null],[11,"read_to_end","","",3,null],[11,"poll","","",4,null],[11,"schedule","","",4,null],[11,"poll","","",5,null],[11,"schedule","","",5,null],[11,"read","","",5,null],[11,"poll","","",6,null],[11,"schedule","","",6,null],[11,"poll","","",7,null],[11,"schedule","","",7,null],[11,"poll","","",8,null],[11,"schedule","","",8,null],[11,"new","","Creates a new I/O object ready to track read/write notifications.",9,{"inputs":[{"name":"s"}],"output":{"name":"readytracker"}}],[11,"maybe_read_ready","","Returns whether the underlying stream might be ready for a read.",9,null],[11,"maybe_write_ready","","Returns whether the underlying stream might be ready for a write.",9,null],[11,"get_ref","","Get a shared reference to the underlying stream.",9,null],[11,"get_mut","","Get a mutable reference to the underlying stream.",9,null],[11,"poll","","",9,null],[11,"schedule","","",9,null],[11,"read","","",9,null],[11,"write","","",9,null],[11,"flush","","",9,null],[11,"poll","","",10,null],[11,"schedule","","",10,null],[11,"read","","",10,null],[11,"poll","","",11,null],[11,"schedule","","",11,null],[11,"write","","",11,null],[11,"flush","","",11,null],[11,"poll","","",12,null],[11,"schedule","","",12,null],[11,"read","","",12,null],[11,"new","","Returns a new future which represents the insertion of the I/O object\n`T` into task local storage, returning a `TaskIo&lt;T&gt;` handle to it.",13,{"inputs":[{"name":"t"}],"output":{"name":"taskionew"}}],[11,"split","","For an I/O object which is both readable and writable, this method can\nbe used to split the handle into two independently owned halves.",13,null],[11,"poll","","",13,null],[11,"schedule","","",13,null],[11,"read","","",13,null],[11,"read_to_end","","",13,null],[11,"write","","",13,null],[11,"flush","","",13,null],[11,"poll","","",14,null],[11,"schedule","","",14,null],[11,"read","","",14,null],[11,"read_to_end","","",14,null],[11,"poll","","",15,null],[11,"schedule","","",15,null],[11,"write","","",15,null],[11,"flush","","",15,null],[11,"new","","Creates a new window around the buffer `t` defaulting to the entire\nslice.",16,{"inputs":[{"name":"t"}],"output":{"name":"window"}}],[11,"get_ref","","Gets a shared reference to the underlying buffer inside of this\n`Window`.",16,null],[11,"get_mut","","Gets a mutable reference to the underlying buffer inside of this\n`Window`.",16,null],[11,"into_inner","","Consumes this `Window`, returning the underlying buffer.",16,null],[11,"start","","Returns the starting index of this window into the underlying buffer\n`T`.",16,null],[11,"end","","Returns the end index of this window into the underlying buffer\n`T`.",16,null],[11,"set_start","","Changes the starting index of this window to the index specified.",16,null],[11,"set_end","","Changes the end index of this window to the index specified.",16,null],[11,"as_ref","","",16,null],[11,"as_mut","","",16,null],[11,"poll","","",17,null],[11,"schedule","","",17,null],[6,"IoFuture","","A convenience typedef around a `Future` whose error component is `io::Error`",null,null],[6,"IoStream","","A convenience typedef around a `Stream` whose error component is `io::Error`",null,null],[8,"ReadTask","","A trait representing streams that can be read within the context of a\nfuture&#39;s `Task`.",null,null],[10,"read","","Reads bytes into a buffer, optionally using `task` as a source of\nstorage to draw from.",18,null],[10,"read_to_end","","Reads as much information as possible from this underlying stream into\nthe vector provided, optionally using the `task` as a source of storage\nto draw from.",18,null],[8,"BufReadTask","","A trait representing buffered streams that can be read within the context of\na future&#39;s `Task`.",null,null],[10,"fill_buf","","Reads bytes into a buffer, optionally using `task` as a source of\nstorage to draw from.",19,null],[10,"consume","","Reads as much information as possible from this underlying stream into\nthe vector provided, optionally using the `task` as a source of storage\nto draw from.",19,null],[8,"WriteTask","","A trait representing streams that can be written to within the context of a\nfuture&#39;s `Task`.",null,null],[10,"write","","Writes a list of bytes into this object, optionally using a `task` as a\nsource of storage to draw from.",20,null],[10,"flush","","Flushes any internal buffers of this object, optionally using a `task`\nas a source of storage to draw from.",20,null],[11,"fmt","","",0,null],[11,"eq","","",0,null],[11,"clone","","",0,null],[11,"is_read","","Returns whether this readiness notification indicates that an object is\nreadable.",0,null],[11,"is_write","","Returns whether this readiness notification indicates that an object is\nwritable.",0,null],[11,"bitor","","",0,null],[14,"try_nb!","","A macro to assist with dealing with `io::Result&lt;T&gt;` types where the error\nmay have the type `WouldBlock`.",null,null]],"paths":[[4,"Ready"],[3,"BufReader"],[3,"BufWriter"],[3,"Chain"],[3,"Copy"],[3,"Empty"],[3,"Flush"],[3,"ReadExact"],[3,"ReadToEnd"],[3,"ReadyTracker"],[3,"Repeat"],[3,"Sink"],[3,"Take"],[3,"TaskIo"],[3,"TaskIoRead"],[3,"TaskIoWrite"],[3,"Window"],[3,"WriteAll"],[8,"ReadTask"],[8,"BufReadTask"],[8,"WriteTask"]]};
searchIndex["futures"] = {"doc":"Futures at zero cost","items":[[3,"Task","futures","A structure representing one &quot;task&quot;, or thread of execution throughout the\nlifetime of a set of futures.",null,null],[3,"TaskData","","A reference to a piece of data that&#39;s stored inside of a `Task`.",null,null],[3,"TaskHandle","","A handle to a task that can be sent to other threads.",null,null],[3,"Collect","","A future which takes a list of futures and resolves with a vector of the\ncompleted values.",null,null],[3,"Done","","A future representing a value that is immediately ready.",null,null],[3,"Empty","","A future which is never resolved.",null,null],[3,"Failed","","A future representing a finished but erroneous computation.",null,null],[3,"Finished","","A future representing a finished successful computation.",null,null],[3,"Lazy","","A future which defers creation of the actual future until a callback is\nscheduled.",null,null],[3,"Oneshot","","A future representing the completion of a computation happening elsewhere in\nmemory.",null,null],[3,"Complete","","Represents the completion half of a oneshot through which the result of a\ncomputation is signaled.",null,null],[3,"Canceled","","Error returned from a `Oneshot&lt;T&gt;` whenever the correponding `Complete&lt;T&gt;`\nis dropped.",null,null],[3,"Store","","A combinator which will store some data into task-local storage.",null,null],[3,"AndThen","","Future for the `and_then` combinator, chaining a computation onto the end of\nanother future which completes successfully.",null,null],[3,"Flatten","","Future for the `flatten` combinator, flattening a future-of-a-future to get just\nthe result of the final future.",null,null],[3,"Fuse","","A future which &quot;fuse&quot;s a future once it&#39;s been resolved.",null,null],[3,"Join","","Future for the `join` combinator, waiting for two futures to\ncomplete.",null,null],[3,"Join3","","Future for the `join` combinator, waiting for two futures to\ncomplete.",null,null],[3,"Join4","","Future for the `join` combinator, waiting for two futures to\ncomplete.",null,null],[3,"Join5","","Future for the `join` combinator, waiting for two futures to\ncomplete.",null,null],[3,"Map","","Future for the `map` combinator, changing the type of a future.",null,null],[3,"MapErr","","Future for the `map_err` combinator, changing the error type of a future.",null,null],[3,"OrElse","","Future for the `or_else` combinator, chaining a computation onto the end of\na future which fails with an error.",null,null],[3,"Select","","Future for the `select` combinator, waiting for one of two futures to\ncomplete.",null,null],[3,"SelectNext","","Future yielded as the second result in a `Select` future.",null,null],[3,"SelectAll","","Future for the `select_all` combinator, waiting for one of any of a list of\nfutures to complete.",null,null],[3,"SelectAllNext","","Future yielded as the result in a `SelectAll` future.",null,null],[3,"Then","","Future for the `then` combinator, chaining computations on the end of\nanother future regardless of its outcome.",null,null],[4,"Poll","","Possible return values from the `Future::poll` method.",null,null],[13,"NotReady","","Indicates that the future is not ready yet, ask again later.",0,null],[13,"Ok","","Indicates that the future has completed successfully, and this value is\nwhat the future completed with.",0,null],[13,"Err","","Indicates that the future has failed, and this error is what the future\nfailed with.",0,null],[5,"collect","","Creates a future which represents a collection of the results of the futures\ngiven.",null,{"inputs":[{"name":"i"}],"output":{"name":"collect"}}],[5,"done","","Creates a new &quot;leaf future&quot; which will resolve with the given result.",null,{"inputs":[{"name":"result"}],"output":{"name":"done"}}],[5,"empty","","Creates a future which never resolves, representing a computation that never\nfinishes.",null,{"inputs":[],"output":{"name":"empty"}}],[5,"failed","","Creates a &quot;leaf future&quot; from an immediate value of a failed computation.",null,{"inputs":[{"name":"e"}],"output":{"name":"failed"}}],[5,"finished","","Creates a &quot;leaf future&quot; from an immediate value of a finished and\nsuccessful computation.",null,{"inputs":[{"name":"t"}],"output":{"name":"finished"}}],[5,"lazy","","Creates a new future which will eventually be the same as the one created\nby the closure provided.",null,{"inputs":[{"name":"f"}],"output":{"name":"lazy"}}],[5,"oneshot","","Creates a new in-memory oneshot used to represent completing a computation.",null,null],[5,"store","","A combinator to store some data into task-local storage.",null,{"inputs":[{"name":"t"}],"output":{"name":"store"}}],[5,"select_all","","Creates a new future which will select over a list of futures.",null,{"inputs":[{"name":"i"}],"output":{"name":"selectall"}}],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"fmt","","",0,null],[11,"clone","","",0,null],[11,"map","","Change the success type of this `Poll` value with the closure provided",0,null],[11,"map_err","","Change the error type of this `Poll` value with the closure provided",0,null],[11,"is_not_ready","","Returns whether this is `Poll::NotReady`",0,null],[11,"is_ready","","Returns whether this is either `Poll::Ok` or `Poll::Err`",0,null],[11,"unwrap","","Unwraps this `Poll` into a `Result`, panicking if it&#39;s not ready.",0,null],[11,"from","","",0,{"inputs":[{"name":"result"}],"output":{"name":"poll"}}],[11,"clone","","",1,null],[11,"new","","Creates a new task ready to drive a future.",2,{"inputs":[],"output":{"name":"task"}}],[11,"insert","","Inserts a new piece of task-local data into this task, returning a\nreference to it.",2,null],[11,"get","","Get a reference to the task-local data inside this task.",2,null],[11,"get_mut","","Get a mutable reference to the task-local data inside this task.",2,null],[11,"notify","","During the `Future::schedule` method, notify to the task that a value is\nimmediately ready.",2,null],[11,"handle","","Gets a handle to this task which can be cloned to a piece of\n`Send+&#39;static` data.",2,null],[11,"poll_on","","Inform this task that to make progress, it should call `poll` on the\nspecified executor.",2,null],[11,"run","","Consumes this task to run a future to completion.",2,null],[11,"equivalent","","Returns whether this task handle and another point to the same task.",1,null],[11,"notify","","Notify the associated task that a future is ready to get polled.",1,null],[11,"clone","","",3,null],[0,"executor","","Work in progress implementation of executors for Futures.",null,null],[3,"Inline","futures::executor","Implementation of an `Executor` which just executes everything immediately\nas soon as it&#39;s passed in.",null,null],[3,"Limited","","Implementation of an executor which executes all callbacks immediately, but\nbounds the amount of recursion to prevent blowing the stack.",null,null],[7,"DEFAULT","","The default executor, used by futures by default currently.",null,null],[8,"Executor","","Encapsulation of a value which has the ability to execute arbitrary code.",null,null],[11,"execute","","Executes the given closure `f`, perhaps on a different thread or\ndeferred to a later time.",4,null],[10,"execute_boxed","","Object-safe method of the above interface used when implementing trait\nobjects.",4,null],[8,"ExecuteCallback","","Essentially `Box&lt;FnOnce() + Send&gt;`, just as a trait.",null,null],[10,"call","","",5,{"inputs":[{"name":"box"}],"output":null}],[11,"execute","","",6,null],[11,"execute_boxed","","",6,null],[11,"execute","","",7,null],[11,"execute_boxed","","",7,null],[11,"poll","futures","",8,null],[11,"schedule","","",8,null],[11,"tailcall","","",8,null],[11,"poll","","",9,null],[11,"schedule","","",9,null],[11,"poll","","",10,null],[11,"schedule","","",10,null],[11,"poll","","",11,null],[11,"schedule","","",11,null],[11,"poll","","",12,null],[11,"schedule","","",12,null],[11,"poll","","",13,null],[11,"schedule","","",13,null],[11,"tailcall","","",13,null],[11,"complete","","Completes this oneshot with a successful result.",14,null],[11,"drop","","",14,null],[11,"fmt","","",15,null],[11,"eq","","",15,null],[11,"clone","","",15,null],[11,"poll","","",16,null],[11,"schedule","","",16,null],[11,"drop","","",16,null],[11,"poll","","",17,null],[11,"schedule","","",17,null],[11,"poll","","",18,null],[11,"schedule","","",18,null],[11,"tailcall","","",18,null],[11,"poll","","",19,null],[11,"schedule","","",19,null],[11,"tailcall","","",19,null],[11,"poll","","",20,null],[11,"schedule","","",20,null],[11,"poll","","",21,null],[11,"schedule","","",21,null],[11,"tailcall","","",21,null],[11,"poll","","",22,null],[11,"schedule","","",22,null],[11,"tailcall","","",22,null],[11,"poll","","",23,null],[11,"schedule","","",23,null],[11,"tailcall","","",23,null],[11,"poll","","",24,null],[11,"schedule","","",24,null],[11,"tailcall","","",24,null],[11,"poll","","",25,null],[11,"schedule","","",25,null],[11,"tailcall","","",25,null],[11,"poll","","",26,null],[11,"schedule","","",26,null],[11,"tailcall","","",26,null],[11,"poll","","",27,null],[11,"schedule","","",27,null],[11,"tailcall","","",27,null],[11,"poll","","",28,null],[11,"schedule","","",28,null],[11,"tailcall","","",28,null],[11,"poll","","",29,null],[11,"schedule","","",29,null],[11,"tailcall","","",29,null],[11,"poll","","",30,null],[11,"schedule","","",30,null],[11,"tailcall","","",30,null],[11,"poll","","",31,null],[11,"schedule","","",31,null],[11,"tailcall","","",31,null],[11,"poll","","",32,null],[11,"schedule","","",32,null],[11,"tailcall","","",32,null],[0,"stream","","Asynchronous streams",null,null],[3,"Sender","futures::stream","The transmission end of a channel which is used to send values.",null,null],[3,"Receiver","","The receiving end of a channel which implements the `Stream` trait.",null,null],[3,"IterStream","","A stream which is just a shim over an underlying instance of `Iterator`.",null,null],[3,"AndThen","","A stream combinator which chains a computation onto values produced by a\nstream.",null,null],[3,"Buffered","","An adaptor for a stream of futures to execute the futures concurrently, if\npossible.",null,null],[3,"Collect","","A future which collects all of the values of a stream into a vector.",null,null],[3,"Filter","","A stream combinator used to filter the results of a stream and only yield\nsome values.",null,null],[3,"FilterMap","","A combinator used to filter the results of a stream and simultaneously map\nthem to a different type.",null,null],[3,"Flatten","","A combinator used to flatten a stream-of-streams into one long stream of\nelements.",null,null],[3,"Fold","","A future used to collect all the results of a stream into one generic type.",null,null],[3,"ForEach","","A stream combinator which executes a unit closure over each item on a\nstream.",null,null],[3,"Fuse","","A stream which &quot;fuse&quot;s a stream once it&#39;s terminated.",null,null],[3,"StreamFuture","","A combinator used to temporarily convert a stream into a future.",null,null],[3,"Map","","A stream combinator which will change the type of a stream from one\ntype to another.",null,null],[3,"MapErr","","A stream combinator which will change the error type of a stream from one\ntype to another.",null,null],[3,"Merge","","An adapter for merging the output of two streams.",null,null],[3,"OrElse","","A stream combinator which chains a computation onto errors produced by a\nstream.",null,null],[3,"Skip","","A stream combinator which skips a number of elements before continuing.",null,null],[3,"SkipWhile","","A stream combinator which skips elements of a stream while a predicate\nholds.",null,null],[3,"Take","","A stream combinator which returns a maximum number of elements.",null,null],[3,"Then","","A stream combinator which chains a computation onto each item produced by a\nstream.",null,null],[3,"Zip","","An adapter for merging the output of two streams.",null,null],[4,"MergedItem","","An item returned from a merge stream, which represents an item from one or\nboth of the underlying streams.",null,null],[13,"First","","An item from the first stream",33,null],[13,"Second","","An item from the second stream",33,null],[13,"Both","","Items from both streams",33,null],[5,"channel","","Creates an in-memory channel implementation of the `Stream` trait.",null,null],[5,"iter","","Converts an `Iterator` into a `Stream` which is always ready to yield the\nnext value.",null,{"inputs":[{"name":"i"}],"output":{"name":"iterstream"}}],[11,"poll","","",34,null],[11,"schedule","","",34,null],[11,"drop","","",34,null],[11,"send","","Sends a new value along this channel to the receiver.",35,null],[11,"drop","","",35,null],[11,"poll","","",36,null],[11,"schedule","","",36,null],[11,"poll","","",37,null],[11,"schedule","","",37,null],[11,"poll","","",38,null],[11,"schedule","","",38,null],[11,"poll","","",39,null],[11,"schedule","","",39,null],[11,"poll","","",40,null],[11,"schedule","","",40,null],[11,"poll","","",41,null],[11,"schedule","","",41,null],[11,"poll","","",42,null],[11,"schedule","","",42,null],[11,"poll","","",43,null],[11,"schedule","","",43,null],[11,"tailcall","","",43,null],[11,"poll","","",44,null],[11,"schedule","","",44,null],[11,"poll","","",45,null],[11,"schedule","","",45,null],[11,"is_done","","Returns whether the underlying stream has finished or not.",45,null],[11,"poll","","",46,null],[11,"schedule","","",46,null],[11,"poll","","",47,null],[11,"schedule","","",47,null],[11,"poll","","",48,null],[11,"schedule","","",48,null],[11,"poll","","",49,null],[11,"schedule","","",49,null],[11,"poll","","",50,null],[11,"schedule","","",50,null],[11,"poll","","",51,null],[11,"schedule","","",51,null],[11,"poll","","",52,null],[11,"schedule","","",52,null],[11,"into_inner","","Consume this adaptor, returning the underlying stream.",52,null],[11,"poll","","",53,null],[11,"schedule","","",53,null],[11,"poll","","",54,null],[11,"schedule","","",54,null],[11,"poll","","",55,null],[11,"schedule","","",55,null],[6,"BoxStream","","A type alias for `Box&lt;Future + Send&gt;`",null,null],[8,"Stream","","A stream of values, not all of which have been produced yet.",null,null],[16,"Item","","The type of item this stream will yield on success.",56,null],[16,"Error","","The type of error this stream may generate.",56,null],[10,"poll","","Attempt to pull out the next value of this stream, returning `None` if\nthe stream is finished.",56,null],[10,"schedule","","Schedule a task to be notified when this future is ready.",56,null],[11,"boxed","","Convenience function for turning this stream into a trait object.",56,null],[11,"into_future","","Converts this stream into a `Future`.",56,null],[11,"map","","Converts a stream of type `T` to a stream of type `U`.",56,null],[11,"map_err","","Converts a stream of error type `T` to a stream of error type `U`.",56,null],[11,"filter","","Filters the values produced by this stream according to the provided\npredicate.",56,null],[11,"filter_map","","Filters the values produced by this stream while simultaneously mapping\nthem to a different type.",56,null],[11,"then","","Chain on a computation for when a value is ready, passing the resulting\nitem to the provided closure `f`.",56,null],[11,"and_then","","Chain on a computation for when a value is ready, passing the successful\nresults to the provided closure `f`.",56,null],[11,"or_else","","Chain on a computation for when an error happens, passing the\nerroneous result to the provided closure `f`.",56,null],[11,"collect","","Collect all of the values of this stream into a vector, returning a\nfuture representing the result of that computation.",56,null],[11,"fold","","Execute an accumulating computation over a stream, collecting all the\nvalues into one final result.",56,null],[11,"flatten","","Flattens a stream of streams into just one continuous stream.",56,null],[11,"skip_while","","Skip elements on this stream while the predicate provided resolves to\n`true`.",56,null],[11,"for_each","","Runs this stream to completion, executing the provided closure for each\nelement on the stream.",56,null],[11,"take","","Creates a new stream of at most `amt` items.",56,null],[11,"skip","","Creates a new stream which skips `amt` items of the underlying stream.",56,null],[11,"fuse","","Fuse a stream such that `poll`/`schedule` will never again be called\nonce it has terminated (signaled emptyness or an error).",56,null],[11,"buffered","","An adaptor for creating a buffered list of pending futures.",56,null],[11,"merge","","An adapter for merging the output of two streams.",56,null],[11,"zip","","An adapter for zipping two streams together.",56,null],[6,"BoxFuture","futures","A type alias for `Box&lt;Future + Send&gt;`",null,null],[8,"Future","","Trait for types which represent a placeholder of a value that will become\navailable at possible some later point in time.",null,null],[16,"Item","","The type of value that this future will resolved with if it is\nsuccessful.",57,null],[16,"Error","","The type of error that this future will resolve with if it fails in a\nnormal fashion.",57,null],[10,"poll","","Query this future to see if its value has become available.",57,null],[10,"schedule","","Schedule a task to be notified when this future is ready.",57,null],[11,"tailcall","","Perform tail-call optimization on this future.",57,null],[11,"boxed","","Convenience function for turning this future into a trait object.",57,null],[11,"map","","Map this future&#39;s result to a different type, returning a new future of\nthe resulting type.",57,null],[11,"map_err","","Map this future&#39;s error to a different error, returning a new future.",57,null],[11,"then","","Chain on a computation for when a future finished, passing the result of\nthe future to the provided closure `f`.",57,null],[11,"and_then","","Execute another future after this one has resolved successfully.",57,null],[11,"or_else","","Execute another future after this one has resolved with an error.",57,null],[11,"select","","Waits for either one of two futures to complete.",57,null],[11,"join","","Joins the result of two futures, waiting for them both to complete.",57,null],[11,"join3","","Same as `join`, but with more futures.",57,null],[11,"join4","","Same as `join`, but with more futures.",57,null],[11,"join5","","Same as `join`, but with more futures.",57,null],[11,"flatten","","Flatten the execution of this future when the successful result of this\nfuture is itself another future.",57,null],[11,"fuse","","Fuse a future such that `poll` will never again be called once it has\ncompleted.",57,null],[11,"forget","","Consume this future drive it to completion.",57,null],[8,"IntoFuture","","Class of types which can be converted themselves into a future.",null,null],[16,"Future","","The future that this type can be converted into.",58,null],[16,"Item","","The item that the future may resolve with.",58,null],[16,"Error","","The error that the future may resolve with.",58,null],[10,"into_future","","Consumes this object and produces a future.",58,null],[14,"try_poll!","","",null,null]],"paths":[[4,"Poll"],[3,"TaskHandle"],[3,"Task"],[3,"TaskData"],[8,"Executor"],[8,"ExecuteCallback"],[3,"Inline"],[3,"Limited"],[3,"Collect"],[3,"Done"],[3,"Empty"],[3,"Failed"],[3,"Finished"],[3,"Lazy"],[3,"Complete"],[3,"Canceled"],[3,"Oneshot"],[3,"Store"],[3,"AndThen"],[3,"Flatten"],[3,"Fuse"],[3,"Join"],[3,"Join3"],[3,"Join4"],[3,"Join5"],[3,"Map"],[3,"MapErr"],[3,"OrElse"],[3,"Select"],[3,"SelectNext"],[3,"SelectAll"],[3,"SelectAllNext"],[3,"Then"],[4,"MergedItem"],[3,"Receiver"],[3,"Sender"],[3,"IterStream"],[3,"AndThen"],[3,"Buffered"],[3,"Collect"],[3,"Filter"],[3,"FilterMap"],[3,"Flatten"],[3,"Fold"],[3,"ForEach"],[3,"Fuse"],[3,"StreamFuture"],[3,"Map"],[3,"MapErr"],[3,"Merge"],[3,"OrElse"],[3,"Skip"],[3,"SkipWhile"],[3,"Take"],[3,"Then"],[3,"Zip"],[8,"Stream"],[8,"Future"],[8,"IntoFuture"]]};
initSearch(searchIndex);
