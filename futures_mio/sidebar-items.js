initSidebarItems({"struct":[["AddLoopData","Future returned from the `LoopHandle::add_loop_data` method."],["AddSource","A future which will resolve a unique `tok` token for an I/O object."],["AddTimeout","Return value from the `LoopHandle::add_timeout` method, a future that will resolve to a `TimeoutToken` to configure the behavior of that timeout."],["Loop","An event loop."],["LoopData","A handle to data that is owned by an event loop thread, and is only accessible on that thread itself."],["LoopHandle","Handle to an event loop, used to construct I/O objects, send messages, and otherwise interact indirectly with the event loop itself."],["LoopPin","A non-sendable handle to an event loop, useful for manufacturing instances of `LoopData`."],["ReadinessStream","A concrete implementation of a stream of readiness notifications for I/O objects that originates from an event loop."],["Source","Type of I/O objects inserted into the event loop, created by `Source::new`."],["TcpListener","An I/O object representing a TCP socket listening for incoming connections."],["TcpStream","An I/O object representing a TCP stream connected to a remote endpoint."],["Timeout","A future representing the notification that a timeout has occurred."],["TimeoutToken","A token that identifies an active timeout."],["UdpSocket","An I/O object representing a UDP socket."]],"type":[["IoSource","I/O objects inserted into the event loop"]]});