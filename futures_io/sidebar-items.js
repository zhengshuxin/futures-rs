initSidebarItems({"enum":[["Ready","Readiness notifications that a stream can deliver."]],"fn":[["chain","Chains one I/O stream onto another."],["copy","Creates a future which represents copying all the bytes from one object to another."],["empty","An I/O object which is always at EOF and ready for a read."],["flush","Creates a future which will entirely flush an I/O object and then yield the object itself."],["read_exact","Creates a future which will read exactly enough bytes to fill `buf`, returning an error if EOF is hit sooner."],["read_to_end","Creates a future which will read all the bytes associated with the I/O object `A` into the buffer provided."],["repeat","Creates an I/O combinator which is always ready for reading, and infinitely yields a stream of bytes corresopnding to the value provided here."],["sink","An I/O combinator that is always ready to be written to and just gobbles up anything written to it."],["take","Creates a new I/O object which will read at most `amt` bytes from the underlying stream, and then continuously return that it is at EOF."],["write_all","Creates a future that will write the entire contents of the buffer `buf` to the stream `a` provided."]],"macro":[["try_nb!","A macro to assist with dealing with `io::Result<T>` types where the error may have the type `WouldBlock`."]],"struct":[["BufReader","An I/O object which amortizes a number of `read` operations by reading many bytes at once into an internal buffer."],["BufWriter","An I/O object intended to mirror the `BufWriter` abstraction in the standard library."],["Chain","An I/O combinator which will read all bytes from one stream and then the next."],["Copy","A future which will copy all data from a reader into a writer."],["Empty","An I/O combinator which is always ready for a read and is always at EOF."],["Flush","A future used to fully flush an I/O object."],["ReadExact","A future which can be used to easily read the entire contents of a stream into a vector."],["ReadToEnd","A future which can be used to easily read the entire contents of a stream into a vector."],["ReadyTracker","An I/O object which can be used to track the read/write readiness of an underlying object."],["Repeat","An I/O object of an infinite stream of bytes that's always ready to read."],["Sink","An I/O object always ready for writing that will simply move all bytes written to it into the void."],["Take","An I/O combinator which will read at most a fixed number of bytes from an underlying stream before continually returning that it is at EOF."],["TaskIo","Abstraction that allows inserting an I/O object into task-local storage, returning a handle that can be split."],["TaskIoRead","The readable half of a `TaskIo<T>` instance returned from `TaskIo::split`."],["TaskIoWrite","The writable half of a `TaskIo<T>` instance returned from `TaskIo::split`."],["Window","A owned window around an underlying buffer."],["WriteAll","A future used to write the entire contents of some data to a stream."]],"trait":[["BufReadTask","A trait representing buffered streams that can be read within the context of a future's `Task`."],["ReadTask","A trait representing streams that can be read within the context of a future's `Task`."],["WriteTask","A trait representing streams that can be written to within the context of a future's `Task`."]],"type":[["IoFuture","A convenience typedef around a `Future` whose error component is `io::Error`"],["IoStream","A convenience typedef around a `Stream` whose error component is `io::Error`"]]});